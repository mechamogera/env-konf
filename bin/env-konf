#! /usr/bin/env ruby
# vim:ft=ruby:
# ruby -Ilib bin/cipher-conf

require 'optparse'
require 'env-konf'
require 'highline'

class EnvKonfCommand
  VERSION = EnvKonf::VERSION
  NAME = "env-konf"

  def self.run(argv)
    new(argv.dup).run
  end

  def initialize(argv)
    @options = {}
    @argv = argv

    @subparsers = {
       "help" => OptionParser.new { |opt|
          opt.banner = <<-EOB
Usage: #{NAME} help <subcommand>

Show help of subcommand.
          EOB
       },
       "zip" => OptionParser.new { |opt|
          opt.banner = <<-EOB
Usage: #{NAME} zip <zippath>

Zip profile to <zippath>
          EOB

          opt.separator ""

          opt.separator "Options:"
          opt.on("-p", "--password=VAL", "Specify encoding password") { |v| @options[:password] = v }
          opt.on("--profile=VAL", "Specify profile") { |v| @options[:profile] = v }
          opt.on("-f", "--force", "Zip forced") { @options[:force] = true }
       },
       "unzip" => OptionParser.new { |opt|
          opt.banner = <<-EOB
Usage: #{NAME} unzip <zippath>

Unzip to profile from <zippath>
          EOB

          opt.separator ""

          opt.separator "Options:"
          opt.on("-p", "--password=VAL", "Specify decoding password") { |v| @options[:password] = v }
          opt.on("-f", "--force", "Unzip forced") { @options[:force] = true }
       },
       "encode" => OptionParser.new { |opt|
          opt.banner = <<-EOB
Usage: #{NAME} encode <encoded_path>

Encode to <encoded_path> from profile using rsa key
          EOB
          
          opt.separator ""

          opt.separator "Options:"
          opt.on("-k", "--rsa-key=VAL", "Specify rsa key path") { |v| @options[:key] = v }
          opt.on("--profile=VAL", "Specify profile") { |v| @options[:profile] = v }
          opt.on("-f", "--force", "Encode forced") { @options[:force] = true }
       },
       "decode" => OptionParser.new { |opt|
          opt.banner = <<-EOB
Usage: #{NAME} decode <encoded_path>

Decode to profile from <encoded_path> using rsa key
          EOB

          opt.separator ""

          opt.separator "Options:"
          opt.on("-k", "--rsa-key=VAL", "Specify rsa key path") { |v| @options[:key] = v }
          opt.on("--profile=VAL", "Specify profile") { |v| @options[:profile] = v }
          opt.on("-f", "--force", "Decode forced") { @options[:force] = true }
       },
       "config" => OptionParser.new { |opt|
         opt.banner = <<-EOB
Usage: #{NAME} config

Set configuration options
         EOB

         opt.separator ""

         opt.separator "Options:"
         opt.on("-p", "--check-password=VAL", "Set password hash for checing password of encoding") { |v| @options[:check_password] = v }
         opt.on("-r", "--profile=VAL",  "Set profile") { |v| @options[:profile] = v }
         opt.on("-t", "--target-path=VAL", "Set zippath") { |v| @options[:target_path] = v }
         opt.on("-e", "--rsa-encode-key=VAL", "Specify rsa key path for encode") { |v| @options[:encode_key] = v }
         opt.on("-d", "--rsa-decode-key=VAL", "Specify rsa key path for decode") { |v| @options[:decode_key] = v }
       },
       "profile-init" => OptionParser.new { |opt|
         opt.banner = <<-EOB
Usage: #{NAME} profile-init <profile>

create <profile>
         EOB
       },
    }

    @parser = OptionParser.new do |parser|
      parser.banner = <<-EOB
Usage: #{NAME} <subcommand> <args>
      EOB

      parser.separator ""

      parser.separator "Subcommands:"
      @subparsers.keys.sort.each do |k|
        parser.separator "#{parser.summary_indent}    #{k}"
      end

      parser.separator ""

      parser.separator "Options:"
      parser.on('--version', "Show version string `#{VERSION}'") do
        puts VERSION
        exit
      end
    end
  end

  def run
    @parser.order!(@argv)
    if @argv.empty?
      puts @parser.help
      exit
    end

    @subcommand = @argv.shift
    method_name = "cmd_#{@subcommand.gsub("-", "_")}"
    unless self.respond_to?(method_name)
      raise ArgumentError.new("Not implemented subcommand: `#{@subcommand}'.")
    end
    
    @subparsers[@subcommand].parse!(@argv)
    self.send(method_name)
  end

  def cmd_help
    subcommand, = @argv
    if subcommand
      if @subparsers.key?(subcommand)
        puts @subparsers[subcommand].help
      else
        puts <<-EOB
No such subcommand `#{subcommand}'
#{@parser.help}
        EOB
      end
    else
      puts @parser.help
    end
  end

  def cmd_zip
    path, = @argv
    @options[:path] = path
    result = EnvKonf.zip(@options)
    if result[:is_skip]
      puts "  skip zip"
    else
      puts "  zip to #{result[:target_path]} from #{result[:profile_path]}"
    end
  end

  def cmd_unzip
    path, = @argv
    @options[:path] = path
    result = EnvKonf.unzip(@options)
    if result[:is_skip]
      puts "  skip unzip"
    else
      puts "  unzip to #{result[:profile_path]} from #{result[:target_path]}"
    end
  end

  def cmd_encode
    path, = @argv
    @options[:path] = path
    result = EnvKonf.encode(@options)
    if result[:is_skip]
      puts "  skip encode"
    else
      puts "  encode to #{result[:target_path]} from #{result[:profile_path]}"
    end
  end

  def cmd_decode
    path, = @argv
    @options[:path] = path
    result = EnvKonf.decode(@options)
    if result[:is_skip]
      puts "  skip decode"
    else
      puts "  decode to #{result[:profile_path]} from #{result[:target_path]}"
    end
  end

  def cmd_config
    EnvKonf::Config.passwd_md5 = @options[:check_password] if @options[:check_password]
    EnvKonf::Config.target_path = @options[:target_path] if @options[:target_path]
    EnvKonf::Config.profile = @options[:profile] if @options[:profile]
    EnvKonf::Config.encode_key = @options[:encode_key] if @options[:encode_key]
    EnvKonf::Config.decode_key = @options[:decode_key] if @options[:decode_key]
    puts "  update #{EnvKonf::Config.file_path}"
  end

  def cmd_profile_init
    profile, = @argv
    path = EnvKonf.profile_init(profile)
    puts "  create #{path}"
  end
end

if File.basename(__FILE__) == File.basename($0)
  EnvKonfCommand.run(ARGV)
end
